"""
Django settings for auroraworld_task project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see:
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see:
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta

# ✅ 프로젝트의 기본 디렉토리 경로 설정
BASE_DIR = Path(__file__).resolve().parent.parent

# ✅ 보안 관련 설정 (운영 환경에서는 SECRET_KEY를 환경 변수로 관리할 것)
SECRET_KEY = 'django-insecure-%a0mdx1-pi(g#_!^x*k4i=_((7qf@mwy1ub(=7v%cmvzeh_zs)'

# ✅ 디버그 모드 (운영 환경에서는 반드시 False로 설정)
DEBUG = True

# ✅ 허용할 호스트 리스트 (운영 환경에서는 도메인 추가 필요)
ALLOWED_HOSTS = []


# ============================================
# ✅ Django 애플리케이션 설정
# ============================================

INSTALLED_APPS = [
    # Django 기본 앱
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 커스텀 앱
    'feedmanager',
    'users',

    # 서드파티 라이브러리
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'users.middlewares.JWTAuthenticationMiddleware',  # ✅ JWT 인증 미들웨어 추가
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ✅ URL 설정
ROOT_URLCONF = 'auroraworld_task.urls'


# ============================================
# ✅ 템플릿 설정
# ============================================

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # ✅ 템플릿 폴더 지정
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# ✅ WSGI 설정 (배포 시 필요)
WSGI_APPLICATION = 'auroraworld_task.wsgi.application'


# ============================================
# ✅ 데이터베이스 설정 (현재 SQLite 사용)
# ============================================

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# ============================================
# ✅ 인증 및 비밀번호 검증 설정
# ============================================

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# ✅ 커스텀 사용자 모델 사용
AUTH_USER_MODEL = "users.CustomUser"


# ============================================
# ✅ 국제화 및 시간대 설정
# ============================================

LANGUAGE_CODE = 'en-us'  # 기본 언어
TIME_ZONE = 'UTC'  # 시간대 설정

USE_I18N = True  # 다국어 지원 여부
USE_TZ = True  # 시간대 사용 여부


# ============================================
# ✅ 정적 파일 (CSS, JS, 이미지 등) 설정
# ============================================

STATIC_URL = '/static/'  # 정적 파일 URL 경로
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),  # 프로젝트 폴더 내 static 폴더 경로 지정
]


# ============================================
# ✅ 캐시 및 세션 설정
# ============================================

# Django 기본 캐시 사용 (메모리 캐시)
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "unique-snowflake",
    }
}

# ✅ 기본 세션 엔진 사용 (데이터베이스 기반)
SESSION_ENGINE = "django.contrib.sessions.backends.db"


# ============================================
# ✅ JWT 인증 설정
# ============================================

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),  # ✅ 액세스 토큰 유효 시간
    "REFRESH_TOKEN_LIFETIME": timedelta(hours=6),  # ✅ 리프레시 토큰 유효 시간
    "ROTATE_REFRESH_TOKENS": True,  # ✅ 리프레시 토큰 갱신 여부
    "BLACKLIST_AFTER_ROTATION": False,  # ✅ 토큰 블랙리스트 사용 여부 (False)
    "ALGORITHM": "HS256",  # ✅ 서명 알고리즘
    "SIGNING_KEY": "aurora_task_secret_key",  # ✅ 서명 키 (운영 환경에서는 환경 변수로 설정할 것)
    "AUTH_HEADER_TYPES": ("Bearer",),  # ✅ JWT 토큰 인증 타입
}

# ✅ Django REST Framework 설정
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}

# ============================================
# ✅ password 설정파일
# ============================================

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',  # Argon2를 가장 우선 사용
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
]

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", "OPTIONS": {"min_length": 12}},  # 최소 12자
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
]


# ============================================
# ✅ 기본 필드 타입 설정
# ============================================

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

